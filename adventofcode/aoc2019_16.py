data = '59719896749391372935980241840868095901909650477974922926863874668817926756504816327136638260644919270589305499504699701736406883012172909202912675166762841246709052187371758225695359676410279518694947094323466110604412184843328145082858383186144864220867912457193726817225273989002642178918584132902751560672461100948770988856677526693132615515437829437045916042287792937505148994701494994595404345537543400830028374701775936185956190469052693669806665481610052844626982468241111349622754998877546914382626821708059755592288986918651172943415960912020715327234415148476336205299713749014282618817141515873262264265988745414393060010837408970796104077'
test_data = '12345678'
#data = test_data

import itertools

#data = data * 10000
signal = [int(d) for d in data]

base_pattern = [0, 1, 0, -1]

def phase(signal):
    output = []
    for position in range(1, len(signal) + 1):
        pattern = itertools.cycle(itertools.chain.from_iterable(itertools.repeat(multiplier, position) for multiplier in base_pattern))
        result = sum(element * multiplier for element, multiplier in zip(signal, itertools.islice(pattern, 1, len(signal) + 1)))
        output.append(int(str(result)[-1]))
    return output

for iteration in range(100):
    print(iteration)
    signal = phase(signal)

print(''.join(str(e) for e in signal)[:8])